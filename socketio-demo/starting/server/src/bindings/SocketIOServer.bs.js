// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as SocketIo from "socket.io";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var Http = {};

function Server(Messages) {
  var onConnect = function (server, f) {
    server.on("connection", f);
    
  };
  var on = function (socket, func) {
    socket.on("message", func);
    
  };
  var onDisconnect = function (socket, cb) {
    socket.on("disconnect", (function (param) {
            return Curry._1(cb, undefined);
          }));
    
  };
  var emit = function (io, obj) {
    io.emit("message", obj);
    
  };
  var emitToSocket = function (socket, obj) {
    socket.emit("message", obj);
    
  };
  var broadcast = function (socket, obj) {
    socket.emit("message", obj);
    
  };
  return {
          makeOptions: (function (prim0, prim1, prim2, prim3, prim4) {
              var tmp = {};
              if (prim0 !== undefined) {
                tmp.pingTimeout = prim0;
              }
              if (prim1 !== undefined) {
                tmp.pingInterval = prim1;
              }
              if (prim2 !== undefined) {
                tmp.allowUpgrades = prim2;
              }
              if (prim3 !== undefined) {
                tmp.cors = Caml_option.valFromOption(prim3);
              }
              return tmp;
            }),
          create: (function (prim) {
              return new SocketIo.Server();
            }),
          createWithHttp: (function (prim) {
              return new SocketIo.Server(prim);
            }),
          createWithHttpAndOptions: (function (prim0, prim1) {
              return new SocketIo.Server(prim0, prim1);
            }),
          createWithOptions: (function (prim) {
              return new SocketIo.Server(prim);
            }),
          createWithPort: (function (prim0, prim1) {
              return SocketIo(prim0, prim1);
            }),
          onConnect: onConnect,
          getId: (function (prim) {
              return prim.id;
            }),
          getRooms: (function (prim) {
              return prim.rooms;
            }),
          getHandshake: (function (prim) {
              return prim.handshake;
            }),
          on: on,
          onDisconnect: onDisconnect,
          join: (function (prim0, prim1) {
              return prim0.join(prim1);
            }),
          leave: (function (prim0, prim1) {
              return prim0.leave(prim1);
            }),
          to_: (function (prim0, prim1) {
              return prim0.to(prim1);
            }),
          disconnect: (function (prim0, prim1) {
              return prim0.disconnect(prim1);
            }),
          emit: emit,
          emitToSocket: emitToSocket,
          broadcast: broadcast
        };
}

export {
  Http ,
  Server ,
  
}
/* socket.io Not a pure module */
